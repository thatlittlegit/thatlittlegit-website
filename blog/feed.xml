<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[thatlittlegit's blog]]></title><description><![CDATA[thatlittlegit's blog]]></description><link>https://thatlittlegit.tk</link><generator>metalsmith-feed</generator><lastBuildDate>Fri, 16 Nov 2018 01:04:37 GMT</lastBuildDate><atom:link href="https://thatlittlegit.tk/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Why Shell Scripts and AWK?]]></title><description><![CDATA[<p>In my opinion, <strong>shell scripts are easier to understand and code.</strong> For
example, assume you have an address book as follows:</p>
<pre><code>John Doe      18002672001     john.net
Steve Doe     18002672002     steve.com
</code></pre><p>Then, perhaps you want a system with a prompt that will let you get the name,
site or phone number from a person by an ID (the line it is on) or name. I&#39;ll
show how this can be done in Node.js, C and Shell.</p>
<h2 id="quick-note">Quick Note</h2>
<p>The following section will show what a session can or should look like:</p>
<pre><code>phone&gt; 1
John Doe      18002672001     john.net
phone&gt; 1 phone
18002672001
phone&gt; 2 site
steve.com
phone&gt; 2 name
Steve Doe
phone&gt; license
phone-cli is (c) 2018 thatlittlegit, and is under the GNU General Public
License, 3.0 or higher.
phone&gt; 1 qwerty
field not found
phone&gt; 10 name
entry not found
phone&gt; q
[exit]
</code></pre><p>The contacts file should also be in the user&#39;s home directory. <code>^D</code> <em>can</em> quit,
but doesn&#39;t have to.</p>
<p><em>Lines of code generated by <code>cloc</code>. <a href="../code">Code downloads here</a></em></p>
<h2 id="node-js">Node.js</h2>
<pre><code class="lang-javascript"><span class="hljs-comment">// Note: this could probably be done faster with libraries.</span>
<span class="hljs-comment">// I'm doing this with only Node.</span>

<span class="hljs-keyword">const</span> rl = <span class="hljs-built_in">require</span>(<span class="hljs-string">'readline'</span>).createInterface({
    <span class="hljs-attr">input</span>: process.stdin,
    <span class="hljs-attr">output</span>: process.stdout
});

<span class="hljs-comment">// Parse the file</span>
<span class="hljs-keyword">const</span> file = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>).readFileSync(<span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>).join(<span class="hljs-built_in">require</span>(<span class="hljs-string">'os'</span>).homedir(), <span class="hljs-string">'contacts'</span>), <span class="hljs-string">'utf-8'</span>);
<span class="hljs-keyword">const</span> contacts = file.split(<span class="hljs-string">'\n'</span>).map(<span class="hljs-function">(<span class="hljs-params">line</span>) =&gt;</span> line.split(<span class="hljs-string">'\t'</span>)).map(<span class="hljs-function">(<span class="hljs-params">contact</span>) =&gt;</span> ({
    <span class="hljs-attr">name</span>: contact[<span class="hljs-number">0</span>],
    <span class="hljs-attr">phone</span>: contact[<span class="hljs-number">1</span>],
    <span class="hljs-attr">site</span>: contact[<span class="hljs-number">2</span>]
}));

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>{
    rl.question(<span class="hljs-string">'phone&gt; '</span>, (input) =&gt; {
        <span class="hljs-keyword">if</span> (input === <span class="hljs-string">''</span>) {
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input === <span class="hljs-string">'q'</span>) {
            process.exit(<span class="hljs-number">0</span>);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input === <span class="hljs-string">'license'</span>) {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'phone-cli is (c) 2018 thatlittlegit, and is under the GNU General Public License, 3.0 or higher.'</span>);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">const</span> contact = contacts[<span class="hljs-built_in">Number</span>(input.split(<span class="hljs-string">' '</span>)[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span>];
            <span class="hljs-keyword">const</span> split = input.split(<span class="hljs-string">' '</span>);

            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> contact === <span class="hljs-string">'undefined'</span>) {
                <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'entry not found'</span>);
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (split.length === <span class="hljs-number">1</span>) {
                <span class="hljs-comment">// They need a line</span>
                <span class="hljs-built_in">console</span>.log(file.split(<span class="hljs-string">'\n'</span>)[<span class="hljs-built_in">Number</span>(input.split(<span class="hljs-string">' '</span>)[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span>]);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// They need a field</span>
                <span class="hljs-keyword">switch</span> (split[<span class="hljs-number">1</span>]) {
                <span class="hljs-keyword">case</span> <span class="hljs-string">'name'</span>:
                    <span class="hljs-built_in">console</span>.log(contact.name);
                    <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">case</span> <span class="hljs-string">'phone'</span>:
                    <span class="hljs-built_in">console</span>.log(contact.phone);
                    <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">case</span> <span class="hljs-string">'site'</span>:
                    <span class="hljs-built_in">console</span>.log(contact.site);
                    <span class="hljs-keyword">break</span>;
                <span class="hljs-keyword">default</span>:
                    <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'field not found'</span>);
                }
            }
    }
    main();
    });
}

main();
</code></pre>
<p>Result: <strong>44</strong> lines of code (actually 54).</p>
<h2 id="c">C</h2>
<pre><code class="lang-c"><span class="hljs-comment">// Note: This program only supports contact-paths below 32 bytes, contact-files</span>
<span class="hljs-comment">// of 8192, 128 bytes of command and 512 contacts.</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> strsta(x, y) strstr(x, y) - x == 0</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> strcomp(x, y) strcmp(x, y) == 0</span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strcon</span><span class="hljs-params">(<span class="hljs-keyword">char</span> needle, <span class="hljs-keyword">char</span>* haystack)</span> </span>{
    <span class="hljs-keyword">int</span> i, ret = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(haystack); i++) {
        <span class="hljs-keyword">if</span> (haystack[i] == needle) ret++;
    }
    <span class="hljs-keyword">return</span> ret;
}

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">contact</span> {</span>
    <span class="hljs-keyword">char</span>* name;
    <span class="hljs-keyword">char</span>* number;
    <span class="hljs-keyword">char</span>* address;
};

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">char</span>* contactsloc = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">32</span>);
    <span class="hljs-built_in">snprintf</span>(contactsloc, <span class="hljs-number">32</span>, <span class="hljs-string">"%s/contacts"</span>, getenv(<span class="hljs-string">"HOME"</span>));
    FILE* contactfd = fopen(contactsloc, <span class="hljs-string">"r"</span>);

    <span class="hljs-keyword">if</span> (errno != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, strerror(errno)) % <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;
    <span class="hljs-built_in">free</span>(contactsloc);

    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">contact</span> <span class="hljs-title">contacts</span>[512];</span>

    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; <span class="hljs-comment">// more user-friendly</span>
    <span class="hljs-keyword">char</span>* line = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8192</span>);
    <span class="hljs-keyword">char</span>* chunk;
    <span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-number">8192</span>, contactfd)) {
        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">contact</span> <span class="hljs-title">tmp</span> = {</span> <span class="hljs-string">""</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span> };
        <span class="hljs-keyword">int</span> j;

        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; (chunk = strtok(line, <span class="hljs-string">"\t"</span>)) != <span class="hljs-literal">NULL</span>; j++, line = <span class="hljs-literal">NULL</span>) {
            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)
                tmp.name = chunk;
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>)
                tmp.number = chunk;
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">2</span>)
                tmp.address = chunk;
        }

        contacts[i++] = tmp;
        line = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8192</span>);
    }

    fclose(contactfd);
    <span class="hljs-built_in">free</span>(line);
    <span class="hljs-built_in">free</span>(chunk);

    <span class="hljs-keyword">char</span>* in = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);
    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"phone&gt; "</span>);
    <span class="hljs-keyword">while</span> (fgets(in, <span class="hljs-number">128</span>, <span class="hljs-built_in">stdin</span>)) {
        <span class="hljs-keyword">if</span> (strcomp(in, <span class="hljs-string">"q\n"</span>)) {
            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strcomp(in, <span class="hljs-string">"license\n"</span>)) {
            <span class="hljs-built_in">puts</span>(<span class="hljs-string">"phone-cli is (c) 2018 thatlittlegit, and is under \
the GNU General Public License, 3.0 or \
higher."</span>);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (atoi(in) != <span class="hljs-number">0</span> || strsta(<span class="hljs-string">"0"</span>, in)) {
                <span class="hljs-keyword">int</span> contact = atoi(in);

                <span class="hljs-keyword">if</span> (contacts[contact].name != <span class="hljs-literal">NULL</span>) {
                    <span class="hljs-keyword">if</span> (strcon(<span class="hljs-string">' '</span>, in) == <span class="hljs-number">0</span>) {
                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\t%s\t%s"</span>, contacts[contact].name, contacts[contact].number, contacts[contact].address);
                    } <span class="hljs-keyword">else</span> {
                        <span class="hljs-keyword">int</span> i;
                        <span class="hljs-keyword">char</span>* inp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);
                        <span class="hljs-keyword">char</span>* part = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);
                        <span class="hljs-built_in">strcpy</span>(inp, in);

                        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; (part = strtok(inp, <span class="hljs-string">" "</span>)); inp = <span class="hljs-literal">NULL</span>, i++) {
                            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) {
                                <span class="hljs-keyword">if</span> (strcomp(part, <span class="hljs-string">"name\n"</span>))
                                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, contacts[contact].name);
                                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strcomp(part, <span class="hljs-string">"phone\n"</span>))
                                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, contacts[contact].number);
                                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strcomp(part, <span class="hljs-string">"site\n"</span>))
                                    <span class="hljs-comment">// newline is already in site address</span>
                                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, contacts[contact].address);
                                <span class="hljs-keyword">else</span>
                                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"field not found"</span>);
                            }
                        }
                    }
                } <span class="hljs-keyword">else</span> {
                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"entry not found"</span>);
                }
            }
        }
        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"phone&gt; "</span>);
    }
}
</code></pre>
<p>Result: <strong>84</strong> lines of code (actually 103).</p>
<h2 id="shell">Shell</h2>
<pre><code class="lang-sh"><span class="hljs-meta">#!/bin/sh</span>
<span class="hljs-keyword">while</span> <span class="hljs-built_in">echo</span> -n <span class="hljs-string">'phone&gt; '</span> &amp;&amp; <span class="hljs-built_in">read</span> <span class="hljs-keyword">in</span>
<span class="hljs-keyword">do</span>
    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$in</span>"</span> ]
    <span class="hljs-keyword">then</span>
        <span class="hljs-built_in">echo</span> -n <span class="hljs-string">''</span> <span class="hljs-comment"># nop</span>
    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">"<span class="hljs-variable">$in</span>"</span> = <span class="hljs-string">"q"</span> ]
    <span class="hljs-keyword">then</span>
        <span class="hljs-built_in">exit</span>
    <span class="hljs-keyword">elif</span> [ <span class="hljs-string">"<span class="hljs-variable">$in</span>"</span> = <span class="hljs-string">"license"</span> ]
    <span class="hljs-keyword">then</span>
        <span class="hljs-built_in">echo</span> <span class="hljs-string">"phone-cli is (c) 2018 thatlittlegit, and is under the GNU General Public License, 3.0 or higher."</span>
    <span class="hljs-keyword">else</span>
        fields=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$in</span> | sed <span class="hljs-string">'s/[^ ]//g'</span> | wc -c`
        contact=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$in</span> | cut -d<span class="hljs-string">' '</span> -f1`
        field=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$in</span> | cut -d<span class="hljs-string">' '</span> -f2`

        <span class="hljs-function"><span class="hljs-title">readfromout</span></span>() {
            cat -n ~/contacts | sed <span class="hljs-string">'s/^ *//g'</span> | grep <span class="hljs-string">"^<span class="hljs-variable">$contact</span>"</span>
        }

        <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$(readfromout)</span>"</span> ]
        <span class="hljs-keyword">then</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"entry not found"</span>
        <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$fields</span> -eq 1 ]
        <span class="hljs-keyword">then</span>
            readfromout | cut -f2-4
        <span class="hljs-keyword">else</span>
            <span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$field</span>"</span> = <span class="hljs-string">"name"</span> ]
            <span class="hljs-keyword">then</span>
                readfromout | cut -f2
            <span class="hljs-keyword">elif</span> [ <span class="hljs-string">"<span class="hljs-variable">$field</span>"</span> = <span class="hljs-string">"phone"</span> ]
            <span class="hljs-keyword">then</span>
                readfromout | cut -f3
            <span class="hljs-keyword">elif</span> [ <span class="hljs-string">"<span class="hljs-variable">$field</span>"</span> = <span class="hljs-string">"site"</span> ]
            <span class="hljs-keyword">then</span>
                readfromout | cut -f4
            <span class="hljs-keyword">else</span>
                <span class="hljs-built_in">echo</span> <span class="hljs-string">"field not found"</span>
            <span class="hljs-keyword">fi</span>
        <span class="hljs-keyword">fi</span>
    <span class="hljs-keyword">fi</span>
<span class="hljs-keyword">done</span>
</code></pre>
<!--
```
fix Vim -->
<p>Result: <strong>41</strong> lines of code (actually 43).</p>
<h2 id="conclusion">Conclusion</h2>
<p>As you can tell by the &quot;actual&quot; output, the Shell is much shorter. But I think
it goes farther than that.</p>
<p>The Shell script does not (directly) read the file, it has less parenthesises
confusing things. It doesn&#39;t deal with 50 .splits, deal with reimplementing
<code>strcmp(3)</code> or opening file descriptors. In my <em>opinion</em>, the code is cleaner.</p>
<p>In addition, I think Shell is better-equipped to deal with openness. In
JavaScript, it makes more sense to encode data with JSON. JSON is nice, and an
interpreter is available for <a href="https://json.org">basically everything</a>, but it
isn&#39;t very human-readable. C... who knows. Yet Shell is best-equipped for TSV,
which is human readable and looks like a spreadsheet,
<a href="https://www.windowscentral.com/there-are-now-12-billion-office-users-60-million-office-365-commercial-customers">which people like</a>.
I think it&#39;s also easier to use, since you don&#39;t need to install Node or GCC.</p>
<p>So there&#39;s my two cents.</p>
]]></description><link>https://thatlittlegit.tk/blog/whysh.md</link><guid isPermaLink="true">https://thatlittlegit.tk/blog/whysh.md</guid><pubDate>Mon, 21 May 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Nice to see you too, Cleverbot!]]></title><description><![CDATA[<p>Hey!</p>
<p>Recently had an interesting conversation with Cleverbot. I
said &#39;ok&#39; repeatedly (so much that the page told me to say
something new, so I changed punctuation, thus the change from
&#39;Ok.&#39; to &#39;Ok!&#39;), and it started talking about Minecraft and
Call Me Maybe. The script is below, <a href="https://pastebin.com/raw/rvQtvDrp">and also in a Pastebin</a>.</p>
<pre><code>User: Hello.
Cleverbot: Hi, how are you doing?
User: Ok.
Cleverbot: That&#39;s good.
User: Ok.
Cleverbot: Do you know what Minecraft is?
User: Ok.
Cleverbot: Let&#39;s be random.
User: Ok.
Cleverbot: Necessary Pachyderm.
User: Ok.
Cleverbot: What are your political views?
User: Ok.
Cleverbot: What?
User: Ok!
Cleverbot: Stop saying ok.
User: Ok.
Cleverbot: Please.
User: Ok.
Cleverbot: Tell me.
User: Ok.
Cleverbot: Go on then.
User: Ok.
Cleverbot: I&#39;m waiting.
User: Ok!
Cleverbot: You, sir, are stalling.
User: Ok!
Cleverbot: I would like to request that you play Call Me Maybe.
User: Ok!
Cleverbot: What is your gender?
User: Ok!
Cleverbot: Hello Ok. My name is Julian.
User: Ok!
Cleverbot: And what&#39;s yours?
User: Ok!
Cleverbot: Titans Go!
User: Ok...
Cleverbot: Do you play Pokemon?
User: Ok...
Cleverbot: Love me.
User: Ummmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm.
Cleverbot: *kiss*.
User: ...
Cleverbot: Ok però ora smettiamola di parlare inglese.
[Google Translate] Ok but now lets stop talking English
User: ...
Cleverbot: Are you a demon or an angel?
User: ...
</code></pre><p>Cleverbot, I think you need to learn more.
<code>`</code></p>
]]></description><link>https://thatlittlegit.tk/blog/cleverbot.md</link><guid isPermaLink="true">https://thatlittlegit.tk/blog/cleverbot.md</guid><pubDate>Wed, 21 Feb 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello, World!]]></title><description><![CDATA[<p>Hello, World! I made this Hugo site so I could, like, post stuff. Also for the
RSS feed. I probably won&#39;t update this often, but you never know!</p>
]]></description><link>https://thatlittlegit.tk/blog/hello.md</link><guid isPermaLink="true">https://thatlittlegit.tk/blog/hello.md</guid><pubDate>Sun, 11 Feb 2018 00:00:00 GMT</pubDate></item></channel></rss>